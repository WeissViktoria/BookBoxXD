@page "/home"
@using Domain.Interfaces
@using Model.Entities
@inject OpenLibraryService BookService
@inject NavigationManager Navigation
@inject IRepository<Buch> BookRepository;
@inject IRepository<Benutzer> BenutzerRepo;
@inject IRepository<BuchBeziehung_JT> BeziehungsRepo;


@rendermode InteractiveServer


<link href="https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css" rel="stylesheet">


<PageTitle>Buch Übersicht</PageTitle>

<div class="d-flex justify-content-between align-items-center">
    <h1>Buch Übersicht</h1>
    <div class="d-flex align-items-center">
        @if (showSearchField)
        {
            <input @bind="searchQuery" placeholder="Buchtitel oder Autor eingeben" class="form-control" />
            <button class="btn" style="background-color: #F2ACC4;" @onclick="FetchBooks">Suchen</button>
        }
        <button class="btn btn-light search-icon" @onclick="ShowSearchField">
            <i class="bi bi-search"></i>
        </button>
    </div>
</div>

<button class="btn" style="background-color: #F2ACC4;" @onclick="LoadRandomBooks">Bücher laden</button>

<style>
    .book-covers {
        display: flex;
        flex-wrap: wrap;
        gap: 15px;
        justify-content: center;
    }

    .book-cover {
        position: relative;
        flex: 0 0 auto;
    }

    .book-cover img {
        width: 200px;
        height: 300px;
        object-fit: cover;
    }

    .overlay {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.7);
        color: white;
        display: flex;
        flex-direction: row;
        align-items: center;
        justify-content: center;
        gap: 10px;
        opacity: 0;
        transition: opacity 0.3s;
        z-index: 10;  /* Add this line */
    }

    .overlay button {
        background-color: rgba(255, 0, 0, 0.5); /* Temporarily add a red background */
        border: none;
        padding: 10px;
        cursor: pointer;
        border-radius: 5px;
        display: flex;
        align-items: center;
        gap: 5px;
    }


    .book-cover:hover .overlay {
        opacity: 1;
    }

    .overlay button {
        background-color: #F2ACC4;
        border: none;
        padding: 10px;
        cursor: pointer;
        border-radius: 5px;
        display: flex;
        align-items: center;
        gap: 5px;
    }

    .search-icon {
        border: none;
        background-color: transparent;
        font-size: 1.5rem;
        cursor: pointer;
    }

    .popup {
        position: fixed;
        top: 20px;
        left: 50%;
        transform: translateX(-50%);
        background-color: rgba(57, 57, 57, 0.74);
        color: white;
        padding: 15px 25px;
        border-radius: 10px;
        box-shadow: 0 2px 10px rgba(0,0,0,0.2);
        z-index: 9999;
        font-size: 1.1rem;
        animation: fadeInOut 3s ease forwards;
    }

    @@keyframes fadeInOut {
        0% { opacity: 0; transform: translateX(-50%) translateY(-20px); }
        10% { opacity: 1; transform: translateX(-50%) translateY(0); }
        90% { opacity: 1; transform: translateX(-50%) translateY(0); }
        100% { opacity: 0; transform: translateX(-50%) translateY(-20px); }
    }
</style>

@if (isLoading)
{
    <p style="padding: 5px">Lade Bücher...</p>
}
else if (errorMessage != null)
{
    <p style="color: red;">@errorMessage</p>
}
else if (books != null)
{
    <div class="book-covers" style="padding: 20px">
        @foreach (var book in books)
        {
            <div class="book-cover">
                <img src="@book.CoverUrl" alt="@book.Title" />
                <div class="overlay">
                    <button @onclick="() => LikeBook(book)">
                        @{
                            string iconClass = "bi-heart";
                            string iconColor = "white";

                            if (book.Cover_I.HasValue && likedCoverIds.Contains(book.Cover_I.Value))
                            {
                                iconClass = "bi-heart-fill";
                                iconColor = "red";
                            }
                        }
                        <i class="bi @iconClass" style="color: @iconColor"></i>
                    </button>
                    <button @onclick="() => NavigateTo(book.Cover_I)">
                        <i class="bi bi-book-half"></i>
                    </button>
                </div>
            </div>
        }
    </div>
}
@if (showPopup)
{
<div class="popup">
    @popupMessage
</div>
}
@code {
    private List<Book> books;
    private bool isLoading = false;
    private string errorMessage;
    private string searchQuery;
    private bool showSearchField = false;
    private List<int> likedCoverIds = new();


    private async Task LoadRandomBooks()
    {
        isLoading = true;
        errorMessage = null;
        try
        {
            books = await BookService.GetAllBooks();
            if (books != null && books.Count > 56)
            {
                var random = new Random();
                books = books.OrderBy(b => random.Next()).Take(56).ToList();
            }

            // 👇 Benutzer & Favoriten holen
            var currentUser = (await BenutzerRepo.ReadAsync(b => b.loggedIn == true)).FirstOrDefault();
            if (currentUser != null)
            {
                var beziehungen = await BeziehungsRepo.ReadAsync(b => b.BenutzerId == currentUser.Id && b.Status == BuchStatus.Favoriten);
                var gespeicherteBuchIds = beziehungen.Select(b => b.BuchId).ToList();

                var gespeicherteBuecher = await BookRepository.ReadAsync(b => gespeicherteBuchIds.Contains(b.Id));
                likedCoverIds = gespeicherteBuecher
                    .Where(b => int.TryParse(b.Olid, out _))
                    .Select(b => int.Parse(b.Olid))
                    .ToList();
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Fehler: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }


    private async Task FetchBooks()
    {
        isLoading = true;
        try
        {
            books = await BookService.SearchBooks(searchQuery);
            if (books == null || books.Count == 0)
            {
                errorMessage = "Keine Bücher gefunden";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Fehler bei der Suche: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private void ShowSearchField()
    {
        showSearchField = !showSearchField;
        if (!showSearchField) searchQuery = string.Empty;
    }

    private void NavigateTo(int? coverId)
    {
        if (coverId != null)
        {
            Navigation.NavigateTo($"/book_details/{coverId}");
        }
    }
    
private async Task LikeBook(Book book)
{
    Console.WriteLine($"Liking book: {book.Title}");

    var coverId = book.Cover_I.Value;

    var currentUser = (await BenutzerRepo.ReadAsync(b => b.loggedIn == true)).FirstOrDefault();
    if (currentUser == null)
    {
        Console.WriteLine("Kein eingeloggter Benutzer gefunden!");
        return;
    }

    // Prüfen ob bereits als geliked gespeichert
    if (likedCoverIds.Contains(coverId))
    {
        // Entfernen
        var bestehendesBuch = (await BookRepository.ReadAsync(b => b.Olid == coverId.ToString())).FirstOrDefault();
        if (bestehendesBuch != null)
        {
            var beziehung = (await BeziehungsRepo.ReadAsync(b => b.BenutzerId == currentUser.Id && b.BuchId == bestehendesBuch.Id)).FirstOrDefault();
            if (beziehung != null)
            {
                await BeziehungsRepo.DeleteAsync(beziehung);
            }
            await BookRepository.DeleteAsync(bestehendesBuch);
        }
        likedCoverIds.Remove(coverId);
        await ShowPopup($"{book.Title} aus Favoriten entfernt!");
    }
    else
    {
        // Hinzufügen
        likedCoverIds.Add(coverId);

        var neuesBuch = new Buch
        {
            Titel = book.Title,
            Autor = string.Join(", ", book.Author_Name ?? new List<string>()),
            Beschreibung = null,
            Erster_Satz = book.First_Sentence,
            CoverURL = book.CoverUrl,
            ISBN = book.ISBN != null ? string.Join(", ", book.ISBN) : null,
            Olid = coverId.ToString()
        };

        await BookRepository.CreateAsync(neuesBuch);

        var gespeichertesBuch = (await BookRepository.ReadAsync(b => b.Olid == coverId.ToString())).FirstOrDefault();

        if (gespeichertesBuch != null)
        {
            var beziehung = new BuchBeziehung_JT
            {
                BuchId = gespeichertesBuch.Id,
                BenutzerId = currentUser.Id,
                Status = BuchStatus.Favoriten,
                Anfangsdatum = DateTime.Now
            };

            await BeziehungsRepo.CreateAsync(beziehung);
        }

        await ShowPopup($"{book.Title} zu Favoriten hinzugefügt!");
    }
}
private string popupMessage;
private bool showPopup = false;

private async Task ShowPopup(string message, int duration = 3000)
{
    popupMessage = message;
    showPopup = true;
    StateHasChanged();

    await Task.Delay(duration);
    showPopup = false;
    StateHasChanged();
}


}
