@page "/favorite-books"
@using Domain.Interfaces
@using Model.Entities
@inject IRepository<Buch> BookRepository
@inject IRepository<BuchBeziehung_JT> BeziehungsRepo
@inject IRepository<Benutzer> BenutzerRepo
@inject NavigationManager Navigation

@rendermode InteractiveServer

<link href="https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css" rel="stylesheet" />

<h1>Meine Favoriten</h1>

@if (favoriteBooks == null)
{
<p>Lade Lieblingsbücher...</p>
}
else if (!favoriteBooks.Any())
{
<p>Du hast noch keine Lieblingsbücher gespeichert.</p>
}
else
{
<div class="book-covers" style="padding: 20px">
    @foreach (var buch in favoriteBooks)
    {
    <div class="book-cover">
        <img src="@buch.CoverURL" alt="@buch.Titel" />
        <div class="overlay">
            <button>
                <i class="bi bi-heart-fill" style="color: red;"></i>
            </button>
            <button @onclick="() => NavigateTo(buch.Olid)">
                <i class="bi bi-book-half"></i>
            </button>
        </div>
    </div>
    }
</div>
}

<style>
    .book-covers {
        display: flex;
        flex-wrap: wrap;
        gap: 15px;
        justify-content: center;
    }

    .book-cover {
        position: relative;
        flex: 0 0 auto;
    }

    .book-cover img {
        width: 200px;
        height: 300px;
        object-fit: cover;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.2);
    }

    .overlay {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.7);
        color: white;
        display: flex;
        flex-direction: row;
        align-items: center;
        justify-content: center;
        gap: 10px;
        opacity: 0;
        transition: opacity 0.3s;
        /* kein border-radius hier für eckige Form */
    }

    .overlay button {
        background-color: #F2ACC4;
        border: none;
        padding: 10px;
        cursor: pointer;
        border-radius: 5px;
        display: flex;
        align-items: center;
        gap: 5px;
    }

    .book-cover:hover .overlay {
        opacity: 1;
    }
</style>

@code {
private List<Buch> favoriteBooks;

protected override async Task OnInitializedAsync()
{
var currentUser = (await BenutzerRepo.ReadAsync(b => b.loggedIn == true)).FirstOrDefault();

if (currentUser == null)
{
favoriteBooks = new List<Buch>();
return;
}

var beziehungen = await BeziehungsRepo.ReadAsync(b =>
b.BenutzerId == currentUser.Id && b.Status == BuchStatus.Favoriten);

var buchIds = beziehungen.Select(b => b.BuchId).Distinct().ToList();

favoriteBooks = await BookRepository.ReadAsync(b => buchIds.Contains(b.Id));
}

private void NavigateTo(string olid)
{
if (!string.IsNullOrEmpty(olid))
{
Navigation.NavigateTo($"/book_details/{olid}");
}
}
}
