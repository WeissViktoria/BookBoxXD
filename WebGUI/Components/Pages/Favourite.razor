@page "/favorite-books"

@using Domain.Interfaces
@using Model.Entities
@inject IRepository<Buch> BookRepository
@inject IRepository<BuchBeziehung_JT> BeziehungsRepo
@inject IRepository<Benutzer> BenutzerRepo
@inject NavigationManager Navigation
@inject OpenLibraryService BookService


@rendermode InteractiveServer

<link href="https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css" rel="stylesheet" />

<h1>Meine Favoriten</h1>

@if (isLoading)
{
    <p>Lade Lieblingsbücher...</p>
}
else if (!string.IsNullOrEmpty(errorMessage))
{
    <p class="text-danger">@errorMessage</p>
}
else if (books != null && books.Count > 0)
{
<div class="book-covers" style="padding: 20px">
    @foreach (var book in books)
    {
    <div class="book-cover">
        <img src="@book.CoverURL" alt="@book.Titel" />
        <div class="overlay">
            <button @onclick="() => LikeBook(book)">
                <i class="bi bi-heart-fill" style="color: red"></i>
            </button>
            <button @onclick="() => NavigateTo(book.Olid)">
                <i class="bi bi-book-half"></i>
            </button>
        </div>
    </div>
    }
</div>
}
else
{
<p>Du hast noch keine Favoriten gespeichert.</p>
}

<style>
    .book-covers {
        display: flex;
        flex-wrap: wrap;
        gap: 15px;
        justify-content: center;
    }

    .book-cover {
        position: relative;
        flex: 0 0 auto;
    }

    .book-cover img {
        width: 200px;
        height: 300px;
        object-fit: cover;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.2);
    }

    .overlay {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.7);
        color: white;
        display: flex;
        flex-direction: row;
        align-items: center;
        justify-content: center;
        gap: 10px;
        opacity: 0;
        transition: opacity 0.3s;
        /* kein border-radius hier für eckige Form */
    }

    .overlay button {
        background-color: #F2ACC4;
        border: none;
        padding: 10px;
        cursor: pointer;
        border-radius: 5px;
        display: flex;
        align-items: center;
        gap: 5px;
    }

    .book-cover:hover .overlay {
        opacity: 1;
    }
</style>
@code {
    private List<Buch> books = new();
    private bool isLoading = false;
    private string errorMessage;

    protected override async Task OnInitializedAsync()
    {
        await LoadLikedBooks();
    }

    private async Task LoadLikedBooks()
    {
        isLoading = true;
        try
        {
            var currentUser = (await BenutzerRepo.ReadAsync(b => b.loggedIn == true)).FirstOrDefault();
            if (currentUser != null)
            {
                var beziehungen = await BeziehungsRepo.ReadAsync(b => b.BenutzerId == currentUser.Id && b.Status == BuchStatus.Favoriten);
                var gespeicherteBuchIds = beziehungen.Select(b => b.BuchId).ToList();
                books = await BookRepository.ReadAsync(b => gespeicherteBuchIds.Contains(b.Id));
            }
        }
        catch (Exception ex)
        {
            errorMessage = "Fehler beim Laden der Favoriten: " + ex.Message;
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task LikeBook(Buch book)
    {
        var currentUser = (await BenutzerRepo.ReadAsync(b => b.loggedIn == true)).FirstOrDefault();
        if (currentUser == null || book == null)
        {
            Console.WriteLine("Fehlender Benutzer oder Buch.");
            return;
        }

        var beziehung = (await BeziehungsRepo.ReadAsync(b =>
            b.BenutzerId == currentUser.Id && b.BuchId == book.Id)).FirstOrDefault();

        if (beziehung != null)
        {
            await BeziehungsRepo.DeleteAsync(beziehung);
        }

        await BookRepository.DeleteAsync(book);

        books.Remove(book);
    }

    private void NavigateTo(string olid)
    {
        if (!string.IsNullOrEmpty(olid))
        {
            Navigation.NavigateTo($"/book_details/{olid}");
        }
    }
}
