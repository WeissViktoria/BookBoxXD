@page "/edit-profile"
@using Domain.Interfaces
@using Model.Entities
@using Microsoft.AspNetCore.Components.Forms
@inject IRepository<Benutzer> BenutzerRepo
@inject NavigationManager Navigation
@rendermode InteractiveServer

<PageTitle>Profil bearbeiten</PageTitle>

<style>
    .user-profile-edit {
        text-align: center;
        padding: 20px;
    }

    .profile-picture-edit {
        display: inline-block;
        position: relative;
        margin-bottom: 10px;
        cursor: pointer;
    }

    .profile-picture-edit img {
        width: 200px;
        height: 200px;
        border-radius: 50%;
        border: 4px solid #ccc;
        object-fit: cover;
        margin: 0 auto;
    }

    .placeholder-image-edit {
        width: 200px;
        height: 200px;
        border-radius: 50%;
        border: 4px solid #ccc;
        display: flex;
        justify-content: center;
        align-items: center;
        font-size: 50px;
        background-color: #f0f0f0;
    }

    input[type="text"] {
        display: block;
        margin: 10px auto;
        padding: 10px;
        font-size: 16px;
        width: 250px;
        border: 1px solid #ccc;
        border-radius: 5px;
    }

    button {
        margin-top: 15px;
        padding: 10px 20px;
        background-color: #F2ACC4;
        color: white;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        font-size: 16px;
    }

    button:hover {
        background-color: #A64365;
    }

    .save-success-popup {
        position: fixed;
        top: 20px;
        right: 20px;
        background-color: #4CAF50;
        color: white;
        padding: 15px 25px;
        border-radius: 8px;
        box-shadow: 0 4px 6px rgba(0,0,0,0.2);
        z-index: 1000;
        animation: fadeInOut 3s forwards;
    }

    @@keyframes fadeInOut {
        0% { opacity: 0; transform: translateY(-20px); }
        10% { opacity: 1; transform: translateY(0); }
        90% { opacity: 1; transform: translateY(0); }
        100% { opacity: 0; transform: translateY(-20px); }
    }

</style>

@if (isLoading)
{
    <p style="text-align:center;">Lädt Benutzerprofil...</p>
}
else if (user != null)
{
    <div class="user-profile-edit">
        <label for="fileInput" class="profile-picture-edit" title="Profilbild ändern">
            @if (user.Profilbild == null)
            {
                <div class="placeholder-image-edit">
                    <i class="bi bi-person-circle"></i>
                </div>
            }
            else
            {
                <img src="@GetImageSrc(user.Profilbild)" alt="Profilbild" />
            }
        </label>

        <InputFile id="fileInput" OnChange="HandleFileSelected" style="display: none;" />

        <h3>Benutzername bearbeiten</h3>
        <input type="text" @bind="user.Benutzername" placeholder="Benutzername" />

        <button @onclick="SaveProfile">Speichern</button>
    </div>
}
else
{
    <p style="text-align:center;">Kein Benutzer eingeloggt.</p>
}
@if (showSaveSuccess)
{
<div class="save-success-popup">
    Profil erfolgreich gespeichert!
</div>
}
@code {
    private Benutzer? user;
    private bool isLoading = true;
    private bool isSaving = false;

    protected override async Task OnInitializedAsync()
    {
        isLoading = true;
        user = await GetLoggedInUser();
        isLoading = false;
    }

    private async Task<Benutzer?> GetLoggedInUser()
    {
        var loggedInUsers = await BenutzerRepo.ReadAsync(b => b.loggedIn == true);
        return loggedInUsers.FirstOrDefault();
    }

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        if (user == null) return;

        var file = e.File;
        if (file != null)
        {
            var imagePath = await UploadImage(file);
            user.Profilbild = await ConvertImageToByteArray(imagePath);
            await SaveProfile();
        }
    }

    private async Task<string> UploadImage(IBrowserFile file)
    {
        var fileName = $"{Guid.NewGuid()}{Path.GetExtension(file.Name)}";
        var directoryPath = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot", "img");
        var filePath = Path.Combine(directoryPath, fileName);

        if (!Directory.Exists(directoryPath))
            Directory.CreateDirectory(directoryPath);

        using var stream = file.OpenReadStream(maxAllowedSize: 10 * 1024 * 1024);
        using var fileStream = File.Create(filePath);
        await stream.CopyToAsync(fileStream);

        return filePath;
    }

    private async Task<byte[]> ConvertImageToByteArray(string imagePath)
    {
        return await File.ReadAllBytesAsync(imagePath);
    }

  

    private string GetImageSrc(byte[]? imageData)
    {
        return imageData == null
            ? "default-placeholder.png"
            : $"data:image/png;base64,{Convert.ToBase64String(imageData)}";
    }
    
    private bool showSaveSuccess = false;

    private async Task SaveProfile()
    {
        if (user == null || isSaving) return;

        isSaving = true;
        try
        {
            await BenutzerRepo.UpdateAsync(user);
            showSaveSuccess = true;

            StateHasChanged();  // UI sofort aktualisieren
            await Task.Delay(3000); // Pop-up 3 Sekunden anzeigen
            showSaveSuccess = false;

            Navigation.NavigateTo("/user-profile");
        }
        finally
        {
            isSaving = false;
        }
    }

    
   

}
