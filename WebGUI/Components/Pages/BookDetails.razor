@page "/book_details/{Cover_I:int}"
@using Domain.Interfaces
@using Model.Entities
@inject OpenLibraryService BookService
@inject NavigationManager Navigation
@rendermode InteractiveServer

@inject IRepository<Benutzer> BenutzerRepo

<PageTitle>Buchdetails</PageTitle>
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css">

<div class="page-container">
    <div class="book-details-container">

        <!-- Titel -->
        <div class="book-title-section">
            @if (book != null)
            {
            <h1>@book.Title</h1>
            }
        </div>

        <div class="book-cover-section">
            @if (isLoading)
            {
            <p>Lade Buchdetails...</p>
            }
            else if (errorMessage != null)
            {
            <p style="color: red;">@errorMessage</p>
            }
            else if (book != null)
            {
            <div class="book-cover-wrapper">
                <div class="book-cover">
                    <img src="@book.CoverUrl" alt="@book.Title" class="book-cover-img" />
                    <div class="overlay">
                        <button @onclick="() => LikeBook(book)">
                            <i class="bi bi-heart"></i>
                        </button>
                        <button @onclick="() => MarkAsRead(book)">
                            <i class="bi bi-bookmark-check"></i>
                        </button>
                    </div>
                </div>
            </div>

            <div class="book-info-section">
                <div class="info-box">
                    <h3>Buchinfos</h3>
                    @if (book.Author_Name != null && book.Author_Name.Count > 0)
                    {
                    <p><strong>Autor:</strong> @string.Join(", ", book.Author_Name)</p>
                    }
                    @if (!string.IsNullOrEmpty(book.First_Sentence))
                    {
                    <p><strong>Erster Satz:</strong> @book.First_Sentence</p>
                    }
                    @if (book.ISBN != null && book.ISBN.Count > 0)
                    {
                    <p><strong>ISBN:</strong> @string.Join(", ", book.ISBN)</p>
                    }
                    @if (!string.IsNullOrEmpty(book.Publisher))
                    {
                    <p><strong>Verlag:</strong> @book.Publisher</p>
                    }
                    @if (book.First_Publish_Year > 0)
                    {
                    <p><strong>Erstveröffentlichung:</strong> @book.First_Publish_Year</p>
                    }
                    @if (book.Number_of_Pages != null)
                    {
                    <p><strong>Seitenanzahl:</strong> @book.Number_of_Pages</p>
                    }
                    @if (book.Subject != null && book.Subject.Count > 0)
                    {
                    <p><strong>Fachgebiete:</strong> @string.Join(", ", book.Subject)</p>
                    }
                    @if (book.Language != null && book.Language.Count > 0)
                    {
                    <p><strong>Sprache(n):</strong> @string.Join(", ", book.Language)</p>
                    }

                    <!-- Bewertung -->
                    <!-- Bewertung -->
                    <div class="rating-section">
                        <h4>Bewertung:</h4>
                        <div class="stars">
                            @for (int i = 1; i <= 5; i++)
                            {
                            int currentStar = i;
                            <i class="bi @(currentStar <= rating ? "bi-star-fill" : "bi-star")"
                               @onclick="() => SetRating(currentStar)"
                               style="cursor: pointer;">
                            </i>
                            }
                        </div>
                    </div>

                    <!-- Rezension -->
                    <div class="review-section">
                        <h4>Deine Rezension:</h4>
                        <textarea @bind="reviewText" rows="4" placeholder="Schreibe deine Rezension hier..."></textarea>

                        @if (!IsFormValid)
                        {
                        <p class="validation-message">
                            Bitte gib sowohl eine Bewertung (mind. 1 Stern) als auch eine Rezension ein.
                        </p>
                        }

                        <button class="submit-button" @onclick="SubmitReview" disabled="@(!IsFormValid)">
                            <i class="bi bi-send"></i> Senden
                        </button>

                        @if (showConfirmation)
                        {
                        <p class="confirmation-message">Deine Bewertung wurde gespeichert!</p>
                        }
                    </div>
                </div>
            </div>
            }
        </div>
    </div>
</div>

<style>
    .page-container {
        height: 100vh;
        overflow: hidden;
        background-color: white;
    }

    .book-details-container {
        display: flex;
        flex-direction: column;
        height: 100%;
    }

    .book-title-section {
        padding: 5px 20px 30px 20px;
        width: 100%;
    }

    .book-title-section h1 {
        margin: 0;
        font-size: 2rem;
        color: #333;
    }

    .book-cover-section {
        display: flex;
        align-items: flex-start;
    }

    .book-cover-wrapper {
        display: flex;
        flex-direction: column;
        margin: 0 20px;
    }

    .book-cover {
        position: relative;
        width: 250px;
    }

    .book-cover-img {
        width: 100%;
        max-height: 400px;
        object-fit: contain;
        border-radius: 5px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    }

    .overlay {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.7);
        color: white;
        display: flex;
        flex-direction: row;
        justify-content: center;
        align-items: center;
        gap: 15px;
        opacity: 0;
        transition: opacity 0.3s;
        border-radius: 5px;
    }

    .book-cover:hover .overlay {
        opacity: 1;
    }

    .overlay button {
        background-color: #F2ACC4;
        border: none;
        padding: 10px;
        border-radius: 5px;
        cursor: pointer;
        display: flex;
        align-items: center;
        gap: 5px;
    }

    .book-info-section {
        flex: 1;
        background-color: white;
    }

    .info-box {
        background-color: #f9f9f9;
        padding: 20px;
        border-radius: 8px;
        width: 40vw;
        max-width: 50vw;
        box-shadow: 0 2px 4px rgba(0,0,0,0.05);
    }

    .info-box h3 {
        border-bottom: 1px solid #ddd;
        padding-bottom: 10px;
        color: #333;
    }

    .info-box p {
        margin: 15px 0;
        line-height: 1.6;
    }

    .rating-section {
        margin-top: 20px;
    }

    .stars i {
        color: #FFD700;
        font-size: 1.5rem;
        cursor: pointer;
    }

    .review-section {
        margin-top: 20px;
    }

    .review-section textarea {
        width: 100%;
        padding: 10px;
        border: 1px solid #ccc;
        border-radius: 5px;
        font-size: 1rem;
        resize: vertical;
    }

    .submit-button {
        margin-top: 15px;
        padding: 10px 15px;
        background-color: #4CAF50;
        color: white;
        border: none;
        border-radius: 5px;
        font-size: 1rem;
        cursor: pointer;
        display: flex;
        align-items: center;
        gap: 8px;
    }

    .submit-button:hover {
        background-color: #45a049;
    }

    .submit-button:disabled {
        background-color: #cccccc;
        cursor: not-allowed;
        opacity: 0.6;
    }

    .validation-message {
        color: red;
        font-size: 0.9rem;
        margin-top: 5px;
    }

    .confirmation-message {
        color: green;
        margin-top: 10px;
    }
</style>

@code {
[Parameter]
public int Cover_I { get; set; }

private Book book;
private bool isLoading = true;
private string errorMessage;

private int rating = 0;
private string reviewText = "";
private bool showConfirmation = false;

private bool IsFormValid => rating > 0 && !string.IsNullOrWhiteSpace(reviewText);

protected override async Task OnInitializedAsync()
{
try
{
book = await BookService.GetBookByCoverId(Cover_I);
if (book == null)
{
errorMessage = "Buch nicht gefunden.";
}
}
catch (Exception ex)
{
errorMessage = $"Fehler beim Laden der Buchdetails: {ex.Message}";
}
finally
{
isLoading = false;
}
}

private void LikeBook(Book book)
{
Console.WriteLine("Buch wurde geliket.");
}

private void MarkAsRead(Book book)
{
    
}

private void SetRating(int star)
{
rating = star;
StateHasChanged();
}

private void SubmitReview()
{
Console.WriteLine($"Bewertung: {rating} Sterne");
Console.WriteLine($"Rezension: {reviewText}");

showConfirmation = true;

_ = Task.Delay(3000).ContinueWith(_ =>
{
showConfirmation = false;
InvokeAsync(StateHasChanged);
});
}
}