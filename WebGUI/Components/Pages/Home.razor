@page "/"
@using Domain.Interfaces
@using Model.Entities
@inject OpenLibraryService BookService
@inject NavigationManager Navigation
@inject IRepository<Buch> BookRepository;

@rendermode InteractiveServer

<head>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css" rel="stylesheet">
</head>

<PageTitle>Buch Übersicht</PageTitle>

<div class="d-flex justify-content-between align-items-center">
    <h1>Buch Übersicht</h1>
    <div class="d-flex align-items-center">
        @if (showSearchField)
        {
            <input @bind="searchQuery" placeholder="Buchtitel oder Autor eingeben" class="form-control" />
            <button class="btn" style="background-color: #F2ACC4;" @onclick="FetchBooks">Suchen</button>
        }
        <button class="btn btn-light search-icon" @onclick="ShowSearchField">
            <i class="bi bi-search"></i>
        </button>
    </div>
</div>

<button class="btn" style="background-color: #F2ACC4;" @onclick="LoadRandomBooks">Bücher laden</button>

<style>
    .book-covers {
        display: flex;
        flex-wrap: wrap;
        gap: 15px;
        justify-content: center;
    }

    .book-cover {
        position: relative;
        flex: 0 0 auto;
    }

    .book-cover img {
        width: 200px;
        height: 300px;
        object-fit: cover;
    }

    .overlay {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.7);
        color: white;
        display: flex;
        flex-direction: row;
        align-items: center;
        justify-content: center;
        gap: 10px;
        opacity: 0;
        transition: opacity 0.3s;
        z-index: 10;  /* Add this line */
    }

    .overlay button {
        background-color: rgba(255, 0, 0, 0.5); /* Temporarily add a red background */
        border: none;
        padding: 10px;
        cursor: pointer;
        border-radius: 5px;
        display: flex;
        align-items: center;
        gap: 5px;
    }


    .book-cover:hover .overlay {
        opacity: 1;
    }

    .overlay button {
        background-color: #F2ACC4;
        border: none;
        padding: 10px;
        cursor: pointer;
        border-radius: 5px;
        display: flex;
        align-items: center;
        gap: 5px;
    }

    .search-icon {
        border: none;
        background-color: transparent;
        font-size: 1.5rem;
        cursor: pointer;
    }
</style>

@if (isLoading)
{
    <p style="padding: 5px">Lade Bücher...</p>
}
else if (errorMessage != null)
{
    <p style="color: red;">@errorMessage</p>
}
else if (books != null)
{
    <div class="book-covers" style="padding: 20px">
        @foreach (var book in books)
        {
            <div class="book-cover">
                <img src="@book.CoverUrl" alt="@book.Title" />
                <div class="overlay">
                    <button @onclick="() => LikeBook(book)">
                        @{
                            string iconClass = "bi-heart";
                            string iconColor = "white";

                            if (likedBooks.Contains(book.Olid))
                            {
                                iconClass = "bi-heart-fill";
                                iconColor = "red";
                            }
                        }
                        <i class="bi @iconClass" style="color: @iconColor"></i>
                    </button>
                    <button @onclick="() => NavigateTo(book.Cover_I)">
                        <i class="bi bi-book-half"></i>
                    </button>
                </div>
            </div>
        }
    </div>
}

@code {
    private List<Book> books;
    private bool isLoading = false;
    private string errorMessage;
    private string searchQuery;
    private bool showSearchField = false;
    private HashSet<string> likedBooks = new(); // z. B. Olid als Key


    private async Task LoadRandomBooks()
    {
        isLoading = true;
        errorMessage = null;
        try
        {
            books = await BookService.GetAllBooks();
            if (books != null && books.Count > 56)
            {
                var random = new Random();
                books = books.OrderBy(b => random.Next()).Take(56).ToList();
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Fehler: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task FetchBooks()
    {
        isLoading = true;
        try
        {
            books = await BookService.SearchBooks(searchQuery);
            if (books == null || books.Count == 0)
            {
                errorMessage = "Keine Bücher gefunden";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Fehler bei der Suche: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private void ShowSearchField()
    {
        showSearchField = !showSearchField;
        if (!showSearchField) searchQuery = string.Empty;
    }

    private void NavigateTo(int? coverId)
    {
        if (coverId != null)
        {
            Navigation.NavigateTo($"/book_details/{coverId}");
        }
    }
    
    private async Task LikeBook(Book book)
    {
        Console.WriteLine($"Liking book: {book.Title}");
    
        // Überprüfen, ob das Buch bereits in likedBooks enthalten ist
        if (!likedBooks.Contains(book.Olid))
        {
            likedBooks.Add(book.Olid);

            // Erstellen des neuen Buch-Objekts für die Datenbank
            var neuesBuch = new Model.Entities.Buch
            {
                Titel = book.Title,
                Autor = string.Join(", ", book.Author_Name ?? new List<string>()),
                Beschreibung = null,
                Erster_Satz = book.First_Sentence,
                CoverURL = book.CoverUrl,
                ISBN = book.ISBN != null ? string.Join(", ", book.ISBN) : null,
                Olid = book.Olid // Falls du das ins Entity eingebaut hast
            };

            // Versuchen, das Buch zu speichern
            await CreateBook(neuesBuch);
        }
        else
        {
            Console.WriteLine($"Das Buch {book.Title} wurde bereits als Favorit markiert.");
        }
    }

    private async Task CreateBook(Model.Entities.Buch neuesBuch)
    {
        try
        {
            // Versuchen, das Buch in die Datenbank zu speichern
            await BookRepository.CreateAsync(neuesBuch); 
            Console.WriteLine($"Buch erfolgreich gespeichert: {neuesBuch.Titel}");
        }
        catch (Exception ex)
        {
            // Fehlerbehandlung
            Console.WriteLine($"Fehler beim Speichern des Buches: {ex.Message}");
        }
    }


}
